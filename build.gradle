//file:noinspection GroovyAssignabilityCheck, GrUnresolvedAccess, GroovyUnusedAssignment
import java.text.SimpleDateFormat

plugins {
    id 'java'

    id 'java-library'
    id 'signing'
    id 'maven-publish'
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"

    id 'jacoco'
    id 'idea'
}

group = 'de.griefed'
sourceCompatibility = targetCompatibility = '1.8'

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-core:2.19.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'

    implementation 'org.jetbrains:annotations:23.1.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.1'
    testImplementation 'org.junit.platform:junit-platform-commons:1.9.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.1'
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed",
                "skipped",
                "failed"
    }

    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = true
    }
}

jacoco {
    toolVersion = "0.8.9"
    reportsDirectory = layout.buildDirectory.dir('jacoco')
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
    options.addStringOption('encoding','UTF-8')
    classpath = sourceSets.main.runtimeClasspath
}

java {
    withSourcesJar()
    withJavadocJar()
}

// JAR configuration still needed for Launch4j.
jar {
    // No duplicates
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Customize MANIFEST to include relevant information.
    manifest {
        attributes(
                "Description"    : "A simple version checker, using semantic-release formats like 1.2.3, 2.3.4 or 6.6.6, as well as 3.4.5-alpha.2 or 4.5.6-beta.3, for a given GitHub user and repository, or GitLab repository URL.",
                "Built-By"       : System.getProperty("user.name"),
                "Build-Timestamp": new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                "Created-By"     : "Gradle ${gradle.gradleVersion}",
                "Build-Jdk"      : "${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})",
                "Build-OS"       : "${System.getProperty('os.name')} ${System.getProperty('os.arch')} ${System.getProperty('os.version')}"
        )
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            username = System.getenv("OSSRH_USERNAME")
            password = System.getenv("OSSRH_PASSWORD")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {

            groupId = 'de.griefed'
            artifactId = 'versionchecker'
            from components.java
            version = project.version

            pom {
                name = 'VersionChecker'
                description = 'A simple version checker, using semantic-release formats like 1.2.3, 2.3.4 or 6.6.6, as well as 3.4.5-alpha.2 or 4.5.6-beta.3, for a given GitHub user and repository, or GitLab repository URL.'
                url = 'https://git.griefed.de/Griefed/VersionChecker.git'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        id = 'griefed'
                        name = 'Griefed'
                        email = 'griefed@griefed.de'
                    }
                }

                scm {
                    connection = 'scm:git:git:git.griefed.de/Griefed/VersionChecker.git'
                    developerConnection = 'scm:git:ssh://git.griefed.de/Griefed/VersionChecker.git'
                    url = 'https://git.griefed.de/Griefed/VersionChecker.git'
                }

            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Griefed/versionchecker"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            url = "https://git.griefed.de/api/v4/projects/104/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = System.getenv("GITLAB_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
        maven {
            url = "https://gitlab.com/api/v4/projects/33364648/packages/maven"
            credentials(HttpHeaderCredentials) {
                name = "Private-Token"
                value = System.getenv("GITLABCOM_TOKEN")
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")

    useInMemoryPgpKeys(signingKey,signingPassword)
    sign publishing.publications.mavenJava
}